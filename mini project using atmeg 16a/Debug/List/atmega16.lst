
AVRASM ver. 2.1.30  E:\Fadi\Koleya\Term 8\Embedded\mini project\Debug\List\atmega16.asm Tue Apr 30 20:06:25 2024

E:\Fadi\Koleya\Term 8\Embedded\mini project\Debug\List\atmega16.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\Fadi\Koleya\Term 8\Embedded\mini project\Debug\List\atmega16.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\Fadi\Koleya\Term 8\Embedded\mini project\Debug\List\atmega16.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0113 	JMP  _timer1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0107 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4820
00002b 007a      	.DB  0x20,0x48,0x7A,0x0
                 _0x2000003:
00002c c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\Fadi\Koleya\Term 8\Embedded\mini project\Debug\List\atmega16.asm(1126): warning: .cseg .db misalignment - padding zero byte
00002d 0001      	.DB  0x1
                 _0x2020000:
00002e 4e2d
00002f 4e41
000030 4900
000031 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Fadi\Koleya\Term 8\Embedded\mini project\Debug\List\atmega16.asm(1129): warning: .cseg .db misalignment - padding zero byte
000032 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000033 0004      	.DW  0x04
000034 0160      	.DW  _0x10
000035 0054      	.DW  _0x0*2
                 
000036 0002      	.DW  0x02
000037 017c      	.DW  __base_y_G100
000038 0058      	.DW  _0x2000003*2
                 
000039 0001      	.DW  0x01
00003a 0180      	.DW  __seed_G101
00003b 005a      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bffb      	OUT  GICR,R31
000042 bfeb      	OUT  GICR,R30
000043 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,(14-2)+1
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000050 e6e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000051 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000052 9185      	LPM  R24,Z+
000053 9195      	LPM  R25,Z+
000054 9700      	SBIW R24,0
000055 f061      	BREQ __GLOBAL_INI_END
000056 91a5      	LPM  R26,Z+
000057 91b5      	LPM  R27,Z+
000058 9005      	LPM  R0,Z+
000059 9015      	LPM  R1,Z+
00005a 01bf      	MOVW R22,R30
00005b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005c 9005      	LPM  R0,Z+
00005d 920d      	ST   X+,R0
00005e 9701      	SBIW R24,1
00005f f7e1      	BRNE __GLOBAL_INI_LOOP
000060 01fb      	MOVW R30,R22
000061 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000062 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000063 bfed      	OUT  SPL,R30
000064 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000065 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000066 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000067 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000068 940c 00d8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <stdint.h>
                 ;
                 ;#define F_CPU 20000000UL
                 ;#define TIMER_PRESCALER 256 // Prescaler value for Timer1
                 ;#define  ICR1  ( ICR1L | ((unsigned int)(ICR1H) << 8))
                 ;
                 ;unsigned long frequency;
                 ;char buffer[16];
                 ;
                 ;void ultoa_custom(unsigned long val, char *buf, unsigned char radix)
                 ; 0000 000F {
                 
                 	.CSEG
                 _ultoa_custom:
                 ; .FSTART _ultoa_custom
                 ; 0000 0010     unsigned char i = 0;
                 ; 0000 0011     unsigned char start;
                 ; 0000 0012     unsigned char end;
                 ; 0000 0013     unsigned long rem;
                 ; 0000 0014     char temp;
                 ; 0000 0015 
                 ; 0000 0016     if (val == 0)
00006a 93aa      	ST   -Y,R26
00006b 9724      	SBIW R28,4
00006c 940e 026a 	CALL __SAVELOCR4
                 ;	val -> Y+11
                 ;	*buf -> Y+9
                 ;	radix -> Y+8
                 ;	i -> R17
                 ;	start -> R16
                 ;	end -> R19
                 ;	rem -> Y+4
                 ;	temp -> R18
00006e e010      	LDI  R17,0
00006f 940e 01ee 	CALL SUBOPT_0x0
000071 f461      	BRNE _0x3
                 ; 0000 0017     {
                 ; 0000 0018         buf[i++] = '0';
000072 2fe1      	MOV  R30,R17
000073 5f1f      	SUBI R17,-1
000074 85a9      	LDD  R26,Y+9
000075 85ba      	LDD  R27,Y+9+1
000076 e0f0      	LDI  R31,0
000077 0fae      	ADD  R26,R30
000078 1fbf      	ADC  R27,R31
000079 e3e0      	LDI  R30,LOW(48)
00007a 93ec      	ST   X,R30
                 ; 0000 0019         buf[i] = '\0';
00007b 940e 01f5 	CALL SUBOPT_0x1
                 ; 0000 001A         return;
00007d c056      	RJMP _0x20A0002
                 ; 0000 001B     }
                 ; 0000 001C 
                 ; 0000 001D     while (val != 0)
                 _0x3:
                 _0x4:
00007e 940e 01ee 	CALL SUBOPT_0x0
000080 f181      	BREQ _0x6
                 ; 0000 001E     {
                 ; 0000 001F         rem = val % radix;
000081 940e 01fc 	CALL SUBOPT_0x2
000083 940e 0258 	CALL __MODD21U
                +
000085 83ec     +STD Y + 4 , R30
000086 83fd     +STD Y + 4 + 1 , R31
000087 836e     +STD Y + 4 + 2 , R22
000088 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 0020         buf[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
000089 2fe1      	MOV  R30,R17
00008a 5f1f      	SUBI R17,-1
00008b 940e 0205 	CALL SUBOPT_0x3
                +
00008d 81ac     +LDD R26 , Y + 4
00008e 81bd     +LDD R27 , Y + 4 + 1
00008f 818e     +LDD R24 , Y + 4 + 2
000090 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000091 30aa     +CPI R26 , LOW ( 0xA )
000092 e0e0     +LDI R30 , HIGH ( 0xA )
000093 07be     +CPC R27 , R30
000094 e0e0     +LDI R30 , BYTE3 ( 0xA )
000095 078e     +CPC R24 , R30
000096 e0e0     +LDI R30 , BYTE4 ( 0xA )
000097 079e     +CPC R25 , R30
                 	__CPD2N 0xA
000098 f038      	BRLO _0x7
000099 940e 020c 	CALL SUBOPT_0x4
                +
00009b 5ce9     +SUBI R30 , LOW ( - 55 )
00009c 4fff     +SBCI R31 , HIGH ( - 55 )
00009d 4f6f     +SBCI R22 , BYTE3 ( - 55 )
00009e 4f7f     +SBCI R23 , BYTE4 ( - 55 )
                 	__ADDD1N 55
00009f c006      	RJMP _0x8
                 _0x7:
0000a0 940e 020c 	CALL SUBOPT_0x4
                +
0000a2 5de0     +SUBI R30 , LOW ( - 48 )
0000a3 4fff     +SBCI R31 , HIGH ( - 48 )
0000a4 4f6f     +SBCI R22 , BYTE3 ( - 48 )
0000a5 4f7f     +SBCI R23 , BYTE4 ( - 48 )
                 	__ADDD1N 48
                 _0x8:
0000a6 01d0      	MOVW R26,R0
0000a7 93ec      	ST   X,R30
                 ; 0000 0021         val = val / radix;
0000a8 940e 01fc 	CALL SUBOPT_0x2
0000aa 940e 0233 	CALL __DIVD21U
                +
0000ac 87eb     +STD Y + 11 , R30
0000ad 87fc     +STD Y + 11 + 1 , R31
0000ae 876d     +STD Y + 11 + 2 , R22
0000af 877e     +STD Y + 11 + 3 , R23
                 	__PUTD1S 11
                 ; 0000 0022     }
0000b0 cfcd      	RJMP _0x4
                 _0x6:
                 ; 0000 0023 
                 ; 0000 0024     buf[i] = '\0';
0000b1 940e 01f5 	CALL SUBOPT_0x1
                 ; 0000 0025 
                 ; 0000 0026     // Reverse the string
                 ; 0000 0027     start = 0;
0000b3 e000      	LDI  R16,LOW(0)
                 ; 0000 0028     end = i - 1;
0000b4 2fe1      	MOV  R30,R17
0000b5 50e1      	SUBI R30,LOW(1)
0000b6 2f3e      	MOV  R19,R30
                 ; 0000 0029     while (start < end)
                 _0xA:
0000b7 1703      	CP   R16,R19
0000b8 f4d8      	BRSH _0xC
                 ; 0000 002A     {
                 ; 0000 002B         temp = buf[start];
0000b9 85a9      	LDD  R26,Y+9
0000ba 85ba      	LDD  R27,Y+9+1
0000bb 27ee      	CLR  R30
0000bc 0fa0      	ADD  R26,R16
0000bd 1fbe      	ADC  R27,R30
0000be 912c      	LD   R18,X
                 ; 0000 002C         buf[start] = buf[end];
0000bf 2fe0      	MOV  R30,R16
0000c0 940e 0205 	CALL SUBOPT_0x3
0000c2 85a9      	LDD  R26,Y+9
0000c3 85ba      	LDD  R27,Y+9+1
0000c4 27ee      	CLR  R30
0000c5 0fa3      	ADD  R26,R19
0000c6 1fbe      	ADC  R27,R30
0000c7 91ec      	LD   R30,X
0000c8 01d0      	MOVW R26,R0
0000c9 93ec      	ST   X,R30
                 ; 0000 002D         buf[end] = temp;
0000ca 2fe3      	MOV  R30,R19
0000cb 85a9      	LDD  R26,Y+9
0000cc 85ba      	LDD  R27,Y+9+1
0000cd e0f0      	LDI  R31,0
0000ce 0fea      	ADD  R30,R26
0000cf 1ffb      	ADC  R31,R27
0000d0 8320      	ST   Z,R18
                 ; 0000 002E         start++;
0000d1 5f0f      	SUBI R16,-1
                 ; 0000 002F         end--;
0000d2 5031      	SUBI R19,1
                 ; 0000 0030     }
0000d3 cfe3      	RJMP _0xA
                 _0xC:
                 ; 0000 0031 }
                 _0x20A0002:
0000d4 940e 026f 	CALL __LOADLOCR4
0000d6 962f      	ADIW R28,15
0000d7 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0034 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0035     // Initialize LCD
                 ; 0000 0036     lcd_init(16);
0000d8 e1a0      	LDI  R26,LOW(16)
0000d9 d0e6      	RCALL _lcd_init
                 ; 0000 0037 
                 ; 0000 0038     // Set Timer1 to Normal mode, prescaler 256
                 ; 0000 0039     TCCR1A = 0; // Normal mode
0000da e0e0      	LDI  R30,LOW(0)
0000db bdef      	OUT  0x2F,R30
                 ; 0000 003A     TCCR1B = (1 << ICES1) | (1 << CS12); // Input capture on rising edge, prescaler 256
0000dc e4e4      	LDI  R30,LOW(68)
0000dd bdee      	OUT  0x2E,R30
                 ; 0000 003B 
                 ; 0000 003C     // Enable Timer1 overflow interrupt
                 ; 0000 003D     TIMSK |= (1 << TOIE1);
0000de b7e9      	IN   R30,0x39
0000df 60e4      	ORI  R30,4
0000e0 bfe9      	OUT  0x39,R30
                 ; 0000 003E 
                 ; 0000 003F     // Enable Timer1 input capture interrupt
                 ; 0000 0040     TIMSK |= (1 << TICIE1);
0000e1 b7e9      	IN   R30,0x39
0000e2 62e0      	ORI  R30,0x20
0000e3 bfe9      	OUT  0x39,R30
                 ; 0000 0041 
                 ; 0000 0042     // Set I/O direction for ICP1 pin (PD6)
                 ; 0000 0043     DDRD &= ~(1 << PORTD6);
0000e4 988e      	CBI  0x11,6
                 ; 0000 0044 
                 ; 0000 0045     // Global enable interrupts
                 ; 0000 0046     #asm("sei")
0000e5 9478      	sei
                 ; 0000 0047 
                 ; 0000 0048     while (1)
                 _0xD:
                 ; 0000 0049     {
                 ; 0000 004A         // Display frequency on LCD
                 ; 0000 004B         lcd_clear();
0000e6 d0a7      	RCALL _lcd_clear
                 ; 0000 004C         lcd_gotoxy(0, 0);
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 93ea      	ST   -Y,R30
0000e9 e0a0      	LDI  R26,LOW(0)
0000ea d096      	RCALL _lcd_gotoxy
                 ; 0000 004D         ultoa_custom(frequency, buffer, 10);
0000eb 91e0 0164 	LDS  R30,_frequency
0000ed 91f0 0165 	LDS  R31,_frequency+1
0000ef 9160 0166 	LDS  R22,_frequency+2
0000f1 9170 0167 	LDS  R23,_frequency+3
0000f3 940e 0261 	CALL __PUTPARD1
0000f5 e6e8      	LDI  R30,LOW(_buffer)
0000f6 e0f1      	LDI  R31,HIGH(_buffer)
0000f7 93fa      	ST   -Y,R31
0000f8 93ea      	ST   -Y,R30
0000f9 e0aa      	LDI  R26,LOW(10)
0000fa df6f      	RCALL _ultoa_custom
                 ; 0000 004E         lcd_puts(buffer);
0000fb e6a8      	LDI  R26,LOW(_buffer)
0000fc e0b1      	LDI  R27,HIGH(_buffer)
0000fd d0b1      	RCALL _lcd_puts
                 ; 0000 004F         lcd_puts(" Hz");
                +
0000fe e6a0     +LDI R26 , LOW ( _0x10 + ( 0 ) )
0000ff e0b1     +LDI R27 , HIGH ( _0x10 + ( 0 ) )
                 	__POINTW2MN _0x10,0
000100 d0ae      	RCALL _lcd_puts
                 ; 0000 0050 
                 ; 0000 0051         // Wait for a short time to update the display
                 ; 0000 0052         delay_ms(100);
000101 e6a4      	LDI  R26,LOW(100)
000102 e0b0      	LDI  R27,0
000103 940e 021f 	CALL _delay_ms
                 ; 0000 0053     }
000105 cfe0      	RJMP _0xD
                 ; 0000 0054 }
                 _0x11:
000106 cfff      	RJMP _0x11
                 ; .FEND
                 
                 	.DSEG
                 _0x10:
000160           	.BYTE 0x4
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0057 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000107 93ea      	ST   -Y,R30
                 ; 0000 0058     // Timer1 overflowed, indicating low frequency or no signal
                 ; 0000 0059     frequency = 0;
000108 e0e0      	LDI  R30,LOW(0)
000109 93e0 0164 	STS  _frequency,R30
00010b 93e0 0165 	STS  _frequency+1,R30
00010d 93e0 0166 	STS  _frequency+2,R30
00010f 93e0 0167 	STS  _frequency+3,R30
                 ; 0000 005A }
000111 91e9      	LD   R30,Y+
000112 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0000 005D {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
000113 920a      	ST   -Y,R0
000114 921a      	ST   -Y,R1
000115 936a      	ST   -Y,R22
000116 937a      	ST   -Y,R23
000117 938a      	ST   -Y,R24
000118 939a      	ST   -Y,R25
000119 93aa      	ST   -Y,R26
00011a 93ba      	ST   -Y,R27
00011b 93ea      	ST   -Y,R30
00011c 93fa      	ST   -Y,R31
00011d b7ef      	IN   R30,SREG
00011e 93ea      	ST   -Y,R30
                 ; 0000 005E     static uint32_t prev_capture = 0;
                 ; 0000 005F     uint32_t current_capture;
                 ; 0000 0060     uint32_t period;
                 ; 0000 0061 
                 ; 0000 0062     // Get the current capture value
                 ; 0000 0063     current_capture = ICR1;
00011f 9728      	SBIW R28,8
                 ;	current_capture -> Y+4
                 ;	period -> Y+0
000120 b5e6      	IN   R30,0x26
000121 2fae      	MOV  R26,R30
000122 b5e7      	IN   R30,0x27
000123 2ffe      	MOV  R31,R30
000124 e0e0      	LDI  R30,0
000125 2bea      	OR   R30,R26
000126 2766      	CLR  R22
000127 2777      	CLR  R23
                +
000128 83ec     +STD Y + 4 , R30
000129 83fd     +STD Y + 4 + 1 , R31
00012a 836e     +STD Y + 4 + 2 , R22
00012b 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 0064 
                 ; 0000 0065     // Calculate the period (in clock cycles)
                 ; 0000 0066     period = current_capture - prev_capture;
00012c 91a0 0178 	LDS  R26,_prev_capture_S0000003000
00012e 91b0 0179 	LDS  R27,_prev_capture_S0000003000+1
000130 9180 017a 	LDS  R24,_prev_capture_S0000003000+2
000132 9190 017b 	LDS  R25,_prev_capture_S0000003000+3
000134 940e 020c 	CALL SUBOPT_0x4
000136 940e 0229 	CALL __SUBD12
000138 940e 025c 	CALL __PUTD1S0
                 ; 0000 0067 
                 ; 0000 0068     // Update the frequency (in Hz)
                 ; 0000 0069     frequency = (F_CPU / TIMER_PRESCALER) / period;
                +
00013a e2ad     +LDI R26 , LOW ( 0x1312D )
00013b e3b1     +LDI R27 , HIGH ( 0x1312D )
00013c e081     +LDI R24 , BYTE3 ( 0x1312D )
00013d e090     +LDI R25 , BYTE4 ( 0x1312D )
                 	__GETD2N 0x1312D
00013e 940e 0233 	CALL __DIVD21U
000140 93e0 0164 	STS  _frequency,R30
000142 93f0 0165 	STS  _frequency+1,R31
000144 9360 0166 	STS  _frequency+2,R22
000146 9370 0167 	STS  _frequency+3,R23
                 ; 0000 006A 
                 ; 0000 006B     // Update the previous capture value
                 ; 0000 006C     prev_capture = current_capture;
000148 940e 020c 	CALL SUBOPT_0x4
00014a 93e0 0178 	STS  _prev_capture_S0000003000,R30
00014c 93f0 0179 	STS  _prev_capture_S0000003000+1,R31
00014e 9360 017a 	STS  _prev_capture_S0000003000+2,R22
000150 9370 017b 	STS  _prev_capture_S0000003000+3,R23
                 ; 0000 006D }
000152 9628      	ADIW R28,8
000153 91e9      	LD   R30,Y+
000154 bfef      	OUT  SREG,R30
000155 91f9      	LD   R31,Y+
000156 91e9      	LD   R30,Y+
000157 91b9      	LD   R27,Y+
000158 91a9      	LD   R26,Y+
000159 9199      	LD   R25,Y+
00015a 9189      	LD   R24,Y+
00015b 9179      	LD   R23,Y+
00015c 9169      	LD   R22,Y+
00015d 9019      	LD   R1,Y+
00015e 9009      	LD   R0,Y+
00015f 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000160 93aa      	ST   -Y,R26
000161 b3eb      	IN   R30,0x1B
000162 70ef      	ANDI R30,LOW(0xF)
000163 2fae      	MOV  R26,R30
000164 81e8      	LD   R30,Y
000165 7fe0      	ANDI R30,LOW(0xF0)
000166 2bea      	OR   R30,R26
000167 bbeb      	OUT  0x1B,R30
                +
000168 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000169 958a     +DEC R24
00016a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00016b 9ada      	SBI  0x1B,2
                +
00016c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00016d 958a     +DEC R24
00016e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00016f 98da      	CBI  0x1B,2
                +
000170 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000171 958a     +DEC R24
000172 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000173 c078      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000174 93aa      	ST   -Y,R26
000175 81a8      	LD   R26,Y
000176 dfe9      	RCALL __lcd_write_nibble_G100
000177 81e8          ld    r30,y
000178 95e2          swap  r30
000179 83e8          st    y,r30
00017a 81a8      	LD   R26,Y
00017b dfe4      	RCALL __lcd_write_nibble_G100
                +
00017c ef8a     +LDI R24 , LOW ( 250 )
00017d e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00017e 9701     +SBIW R24 , 1
00017f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000180 c06b      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000181 93aa      	ST   -Y,R26
000182 81e8      	LD   R30,Y
000183 e0f0      	LDI  R31,0
000184 58e4      	SUBI R30,LOW(-__base_y_G100)
000185 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000186 81e0      	LD   R30,Z
000187 81a9      	LDD  R26,Y+1
000188 0fae      	ADD  R26,R30
000189 dfea      	RCALL __lcd_write_data
00018a 8059      	LDD  R5,Y+1
00018b 8048      	LDD  R4,Y+0
00018c 9622      	ADIW R28,2
00018d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00018e e0a2      	LDI  R26,LOW(2)
00018f 940e 0211 	CALL SUBOPT_0x5
000191 e0ac      	LDI  R26,LOW(12)
000192 dfe1      	RCALL __lcd_write_data
000193 e0a1      	LDI  R26,LOW(1)
000194 940e 0211 	CALL SUBOPT_0x5
000196 e0e0      	LDI  R30,LOW(0)
000197 2e4e      	MOV  R4,R30
000198 2e5e      	MOV  R5,R30
000199 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00019a 93aa      	ST   -Y,R26
00019b 81a8      	LD   R26,Y
00019c 30aa      	CPI  R26,LOW(0xA)
00019d f011      	BREQ _0x2000005
00019e 1457      	CP   R5,R7
00019f f048      	BRLO _0x2000004
                 _0x2000005:
0001a0 e0e0      	LDI  R30,LOW(0)
0001a1 93ea      	ST   -Y,R30
0001a2 9443      	INC  R4
0001a3 2da4      	MOV  R26,R4
0001a4 dfdc      	RCALL _lcd_gotoxy
0001a5 81a8      	LD   R26,Y
0001a6 30aa      	CPI  R26,LOW(0xA)
0001a7 f409      	BRNE _0x2000007
0001a8 c043      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
0001a9 9453      	INC  R5
0001aa 9ad8      	SBI  0x1B,0
0001ab 81a8      	LD   R26,Y
0001ac dfc7      	RCALL __lcd_write_data
0001ad 98d8      	CBI  0x1B,0
0001ae c03d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001af 93ba      	ST   -Y,R27
0001b0 93aa      	ST   -Y,R26
0001b1 931a      	ST   -Y,R17
                 _0x2000008:
0001b2 81a9      	LDD  R26,Y+1
0001b3 81ba      	LDD  R27,Y+1+1
0001b4 91ed      	LD   R30,X+
0001b5 83a9      	STD  Y+1,R26
0001b6 83ba      	STD  Y+1+1,R27
0001b7 2f1e      	MOV  R17,R30
0001b8 30e0      	CPI  R30,0
0001b9 f019      	BREQ _0x200000A
0001ba 2fa1      	MOV  R26,R17
0001bb dfde      	RCALL _lcd_putchar
0001bc cff5      	RJMP _0x2000008
                 _0x200000A:
0001bd 8118      	LDD  R17,Y+0
0001be 9623      	ADIW R28,3
0001bf 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001c0 93aa      	ST   -Y,R26
0001c1 b3ea      	IN   R30,0x1A
0001c2 6fe0      	ORI  R30,LOW(0xF0)
0001c3 bbea      	OUT  0x1A,R30
0001c4 9ad2      	SBI  0x1A,2
0001c5 9ad0      	SBI  0x1A,0
0001c6 9ad1      	SBI  0x1A,1
0001c7 98da      	CBI  0x1B,2
0001c8 98d8      	CBI  0x1B,0
0001c9 98d9      	CBI  0x1B,1
0001ca 8078      	LDD  R7,Y+0
0001cb 81e8      	LD   R30,Y
0001cc 58e0      	SUBI R30,-LOW(128)
                +
0001cd 93e0 017e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001cf 81e8      	LD   R30,Y
0001d0 54e0      	SUBI R30,-LOW(192)
                +
0001d1 93e0 017f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001d3 e1a4      	LDI  R26,LOW(20)
0001d4 e0b0      	LDI  R27,0
0001d5 940e 021f 	CALL _delay_ms
0001d7 940e 0217 	CALL SUBOPT_0x6
0001d9 940e 0217 	CALL SUBOPT_0x6
0001db 940e 0217 	CALL SUBOPT_0x6
0001dd e2a0      	LDI  R26,LOW(32)
0001de df81      	RCALL __lcd_write_nibble_G100
                +
0001df ef84     +LDI R24 , LOW ( 500 )
0001e0 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
0001e1 9701     +SBIW R24 , 1
0001e2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
0001e3 e2a8      	LDI  R26,LOW(40)
0001e4 df8f      	RCALL __lcd_write_data
0001e5 e0a4      	LDI  R26,LOW(4)
0001e6 df8d      	RCALL __lcd_write_data
0001e7 e8a5      	LDI  R26,LOW(133)
0001e8 df8b      	RCALL __lcd_write_data
0001e9 e0a6      	LDI  R26,LOW(6)
0001ea df89      	RCALL __lcd_write_data
0001eb dfa2      	RCALL _lcd_clear
                 _0x20A0001:
0001ec 9621      	ADIW R28,1
0001ed 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _frequency:
000164           	.BYTE 0x4
                 _buffer:
000168           	.BYTE 0x10
                 _prev_capture_S0000003000:
000178           	.BYTE 0x4
                 __base_y_G100:
00017c           	.BYTE 0x4
                 __seed_G101:
000180           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
0001ee 85eb     +LDD R30 , Y + 11
0001ef 85fc     +LDD R31 , Y + 11 + 1
0001f0 856d     +LDD R22 , Y + 11 + 2
0001f1 857e     +LDD R23 , Y + 11 + 3
                 	__GETD1S 11
0001f2 940e 0266 	CALL __CPD10
0001f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001f5 85a9      	LDD  R26,Y+9
0001f6 85ba      	LDD  R27,Y+9+1
0001f7 27ee      	CLR  R30
0001f8 0fa1      	ADD  R26,R17
0001f9 1fbe      	ADC  R27,R30
0001fa 93ec      	ST   X,R30
0001fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0001fc 85e8      	LDD  R30,Y+8
0001fd e0f0      	LDI  R31,0
                +
0001fe 85ab     +LDD R26 , Y + 11
0001ff 85bc     +LDD R27 , Y + 11 + 1
000200 858d     +LDD R24 , Y + 11 + 2
000201 859e     +LDD R25 , Y + 11 + 3
                 	__GETD2S 11
000202 940e 022e 	CALL __CWD1
000204 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000205 85a9      	LDD  R26,Y+9
000206 85ba      	LDD  R27,Y+9+1
000207 e0f0      	LDI  R31,0
000208 0fea      	ADD  R30,R26
000209 1ffb      	ADC  R31,R27
00020a 010f      	MOVW R0,R30
00020b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
                +
00020c 81ec     +LDD R30 , Y + 4
00020d 81fd     +LDD R31 , Y + 4 + 1
00020e 816e     +LDD R22 , Y + 4 + 2
00020f 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000210 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000211 940e 0174 	CALL __lcd_write_data
000213 e0a3      	LDI  R26,LOW(3)
000214 e0b0      	LDI  R27,0
000215 940c 021f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000217 e3a0      	LDI  R26,LOW(48)
000218 940e 0160 	CALL __lcd_write_nibble_G100
                +
00021a ef84     +LDI R24 , LOW ( 500 )
00021b e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
00021c 9701     +SBIW R24 , 1
00021d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
00021e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00021f 9610      	adiw r26,0
000220 f039      	breq __delay_ms1
                 __delay_ms0:
000221 95a8      	wdr
                +
000222 e888     +LDI R24 , LOW ( 0x1388 )
000223 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000224 9701     +SBIW R24 , 1
000225 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000226 9711      	sbiw r26,1
000227 f7c9      	brne __delay_ms0
                 __delay_ms1:
000228 9508      	ret
                 
                 __SUBD12:
000229 1bea      	SUB  R30,R26
00022a 0bfb      	SBC  R31,R27
00022b 0b68      	SBC  R22,R24
00022c 0b79      	SBC  R23,R25
00022d 9508      	RET
                 
                 __CWD1:
00022e 2f6f      	MOV  R22,R31
00022f 0f66      	ADD  R22,R22
000230 0b66      	SBC  R22,R22
000231 2f76      	MOV  R23,R22
000232 9508      	RET
                 
                 __DIVD21U:
000233 933f      	PUSH R19
000234 934f      	PUSH R20
000235 935f      	PUSH R21
000236 2400      	CLR  R0
000237 2411      	CLR  R1
000238 2744      	CLR  R20
000239 2755      	CLR  R21
00023a e230      	LDI  R19,32
                 __DIVD21U1:
00023b 0faa      	LSL  R26
00023c 1fbb      	ROL  R27
00023d 1f88      	ROL  R24
00023e 1f99      	ROL  R25
00023f 1c00      	ROL  R0
000240 1c11      	ROL  R1
000241 1f44      	ROL  R20
000242 1f55      	ROL  R21
000243 1a0e      	SUB  R0,R30
000244 0a1f      	SBC  R1,R31
000245 0b46      	SBC  R20,R22
000246 0b57      	SBC  R21,R23
000247 f428      	BRCC __DIVD21U2
000248 0e0e      	ADD  R0,R30
000249 1e1f      	ADC  R1,R31
00024a 1f46      	ADC  R20,R22
00024b 1f57      	ADC  R21,R23
00024c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00024d 60a1      	SBR  R26,1
                 __DIVD21U3:
00024e 953a      	DEC  R19
00024f f759      	BRNE __DIVD21U1
000250 01fd      	MOVW R30,R26
000251 01bc      	MOVW R22,R24
000252 01d0      	MOVW R26,R0
000253 01ca      	MOVW R24,R20
000254 915f      	POP  R21
000255 914f      	POP  R20
000256 913f      	POP  R19
000257 9508      	RET
                 
                 __MODD21U:
000258 dfda      	RCALL __DIVD21U
000259 01fd      	MOVW R30,R26
00025a 01bc      	MOVW R22,R24
00025b 9508      	RET
                 
                 __PUTD1S0:
00025c 83e8      	ST   Y,R30
00025d 83f9      	STD  Y+1,R31
00025e 836a      	STD  Y+2,R22
00025f 837b      	STD  Y+3,R23
000260 9508      	RET
                 
                 __PUTPARD1:
000261 937a      	ST   -Y,R23
000262 936a      	ST   -Y,R22
000263 93fa      	ST   -Y,R31
000264 93ea      	ST   -Y,R30
000265 9508      	RET
                 
                 __CPD10:
000266 9730      	SBIW R30,0
000267 4060      	SBCI R22,0
000268 4070      	SBCI R23,0
000269 9508      	RET
                 
                 __SAVELOCR4:
00026a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00026b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00026c 931a      	ST   -Y,R17
00026d 930a      	ST   -Y,R16
00026e 9508      	RET
                 
                 __LOADLOCR4:
00026f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000270 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000271 8119      	LDD  R17,Y+1
000272 8108      	LD   R16,Y
000273 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  13 r18:   4 r19:  11 r20:   7 r21:   6 r22:  29 r23:  20 
r24:  33 r25:  15 r26:  73 r27:  31 r28:   8 r29:   1 r30: 126 r31:  33 
x  :  10 y  : 114 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :   9 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  31 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   3 cpi   :   4 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   2 jmp   :  23 ld    :  27 ldd   :  39 ldi   :  70 
lds   :   8 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  16 movw  :  12 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   3 out   :  13 pop   :   3 push  :   3 rcall :  20 ret   :  21 
reti  :   2 rjmp  :  13 rol   :   7 ror   :   0 sbc   :   7 sbci  :   9 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  43 std   :  17 sts   :  14 sub   :   2 subi  :  10 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004e8   1218     38   1256   16384   7.7%
[.dseg] 0x000060 0x000184      0     36     36    1024   3.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
